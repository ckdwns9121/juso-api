{"version":3,"sources":["App.module.scss","components/AddrItem.module.scss","components/Address.module.scss","components/AddrItem.js","components/AddrItemList.js","components/AddressModal.js","api/address.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddrItem","props","className","styles","jibunAddr","roadAddr","AddrItemList","addr_list","list","map","addr","index","key","useStyles","makeStyles","theme","appBar","position","textAlign","backgroundColor","color","boxShadow","fontSize","title","width","toolbar","display","flexDirection","alignItems","justifyContent","content","padding","flex","close","left","zIndex","Transition","React","forwardRef","ref","Slide","direction","AddressModal","classes","Dialog","fullScreen","open","onClose","handleClose","TransitionComponent","AppBar","Toolbar","IconButton","onClick","aria-label","Typography","variant","DialogContent","type","value","searchAddr","placeholder","onChange","onChangeAddr","onKeyPress","handleKeyPress","length","searchAddress","serach","a","query","axios","get","res","console","log","data","results","juso","App","useState","setOpen","search","setSearch","searchList","serSearchList","onSearch","useCallback","error","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7c2c76ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__Ny5pL\",\"content\":\"App_content__2iHO1\",\"title\":\"App_title__wEppt\",\"input\":\"App_input__1yCkp\",\"addr-input\":\"App_addr-input__3SHRN\",\"search\":\"App_search__K4Ial\",\"box\":\"App_box__2-R2_\",\"location\":\"App_location__2G9H_\",\"list\":\"App_list__3xdBG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"AddrItem_item__1CP1k\",\"sub\":\"AddrItem_sub__2APHD\",\"addr-box\":\"AddrItem_addr-box__2_pOA\",\"addr2\":\"AddrItem_addr2__2Q9K9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Address_container__12yIN\",\"input-box\":\"Address_input-box__2jm0z\",\"modal-input\":\"Address_modal-input__1nHvM\",\"search\":\"Address_search__g02mK\"};","import React from 'react';\r\nimport styles from './AddrItem.module.scss';\r\n\r\nconst AddrItem =(props)=>{\r\n    return(\r\n        <div className={styles['item']}>\r\n            <div className={styles['addr1']}> \r\n                {props.jibunAddr}\r\n            </div>\r\n            <div className={styles['sub']}>\r\n                <div className={styles['addr-box']}>\r\n                    도로명\r\n                </div>\r\n                <div className={styles['addr2']}>\r\n                    {props.roadAddr}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default AddrItem;","import React from 'react';\r\nimport AddrItem from './AddrItem';\r\n\r\nconst AddrItemList =({list}) =>{\r\n    const addr_list = list.map((addr,index)=>(\r\n        <AddrItem key={index} {...addr}/>\r\n    ));\r\n\r\n    return(\r\n        <>{addr_list}</>\r\n    )\r\n}\r\n\r\nexport default AddrItemList;","import React from \"react\";\r\nimport styles from \"./Address.module.scss\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { BiSearch } from \"react-icons/bi\";\r\n// import AddrItemList from 'components/address/AddrItemList';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport AddrItem from './AddrItem';\r\nimport AddrItemList from \"./AddrItemList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n    textAlign: \"center\",\r\n    backgroundColor: \"white\",\r\n    color: \"black\",\r\n    boxShadow: \"none\",\r\n    fontSize: 10,\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    width: \"100%\",\r\n    fontSize: 18,\r\n  },\r\n  toolbar: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  content: {\r\n    padding: 0,\r\n    flex: \"0 0 auto\",\r\n  },\r\n  close: {\r\n    position: \"absolute\",\r\n    left: 0,\r\n    zIndex: 2100,\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst AddressModal = (props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        fullScreen\r\n        open={props.open}\r\n        onClose={props.handleClose}\r\n        TransitionComponent={Transition}\r\n      >\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar className={classes.toolbar}>\r\n            <IconButton\r\n              className={classes.close}\r\n              color=\"inherit\"\r\n              onClick={props.handleClose}\r\n              aria-label=\"close\"\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              배달받을 주소\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <DialogContent className={classes.content}>\r\n          <div className={styles[\"container\"]}>\r\n            <div className={styles['input-box']}>\r\n              <input\r\n                className={styles[\"modal-input\"]}\r\n                type=\"text\"\r\n                value={props.searchAddr}\r\n                placeholder=\"예) 배민동 배민아파트\"\r\n                onChange={props.onChangeAddr}\r\n                onKeyPress={props.handleKeyPress}\r\n              ></input>\r\n            </div>\r\n            <div className={styles['search']}>\r\n            <BiSearch/>\r\n            </div>\r\n            <div>\r\n            {props.list.length !==0 && \r\n            <AddrItemList list={props.list} />\r\n            }\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddressModal;\r\n","import axios from 'axios';\r\n\r\nconst URL = \"http://www.juso.go.kr/addrlink/addrLinkApi.do\";\r\nconst KEY= 'devU01TX0FVVEgyMDIwMDgyMzIxNTAzMDExMDA4OTU=';\r\n\r\nexport const searchAddress= async (serach) =>{\r\n\r\n    const query = `${URL}?confmKey=${KEY}&currentPage=1&countPerPage=10&keyword=${serach}&resultType=json`;\r\n    const res = await axios.get(query);\r\n    console.log(res);\r\n    return res.data.results.juso;\r\n\r\n}","import React ,{useState,useEffect,useCallback} from \"react\";\r\nimport AddressModal from \"./components/AddressModal\";\r\nimport styles from \"./App.module.scss\";\r\nimport {GrFormSearch} from 'react-icons/gr';\r\nimport AddrItemList from './components/AddrItemList';\r\nimport {searchAddress} from './api/address';\r\n\r\nfunction App() {\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [search,setSearch] = useState('');\r\n  const [searchList ,serSearchList] = useState([]);\r\n  const [userList, setUserList] = useState([]);\r\n\r\n\r\n  const onChangeSearch =(e)=>{\r\n    console.log(e.target.value);\r\n    setSearch(e.target.value);\r\n  }\r\n\r\n  const handleOpen =()=>{\r\n    setOpen(true);\r\n    onSearch();\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const onSearch = useCallback(async()=>{\r\n    try{\r\n      const res = await searchAddress(search);\r\n      console.log(res);\r\n      serSearchList(res);\r\n    }\r\n    catch(e){\r\n      console.error(e);\r\n    }\r\n\r\n  },[search]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className={styles[\"container\"]}>\r\n      <div className={styles[\"content\"]}>\r\n        <div className={styles[\"title\"]}>\r\n          지번, 도로명, 건물명을<br />\r\n          입력하세요\r\n        </div>\r\n        <div className={styles['input']}>\r\n          <input  \r\n          placeholder =\"예) 배민동12-3또는 배민아파트\" \r\n          className={styles['addr-input']} \r\n          type=\"text\" value={search} \r\n          onChange={onChangeSearch}></input>\r\n          <div className={styles['search']} onClick={handleOpen}>\r\n            <GrFormSearch/>\r\n          </div>\r\n        </div>\r\n        <div className={styles['box']}>\r\n          <div className={styles['location']}>\r\n              현 위치로 주소 설정\r\n          </div>\r\n        </div>\r\n        <div className={styles['list']}>\r\n            <div className={styles['title']}>\r\n              최근 주소\r\n            </div>\r\n        </div>\r\n      </div>\r\n\r\n      <AddressModal\r\n        open={open}\r\n        handleClose={handleClose}\r\n        list ={searchList}\r\n        onClick={onSearch}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}